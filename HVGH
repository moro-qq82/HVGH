{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HVGH","provenance":[],"collapsed_sections":[],"mount_file_id":"1G6tUNqtECLntesWj-ATXGAs6nxixyUcv","authorship_tag":"ABX9TyPFPzCGjlT4utnKBPQA+64N"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"4P6_UboLT5Kq","colab_type":"text"},"source":["### Module"]},{"cell_type":"code","metadata":{"id":"o9zhZgN5T2XC","colab_type":"code","colab":{}},"source":["#VAE\n","import tensorflow as tf\n","import tensorflow.keras.backend as K\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.optimizers import Adam\n","import time\n","\n","#HDP-GP-HSMM\n","import random\n","import math\n","import sys\n","import os\n","import glob"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"M6f4WnrtVk4R","colab_type":"code","outputId":"42665bee-e32d-4db7-a70c-d3d1165df823","executionInfo":{"status":"ok","timestamp":1587447420746,"user_tz":-540,"elapsed":3362,"user":{"displayName":"長野匡隼","photoUrl":"","userId":"15635473969771913691"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print (tf.__version__)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["2.2.0-rc3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Op4cGV1HoGza","colab_type":"text"},"source":["### VAE"]},{"cell_type":"code","metadata":{"id":"g_jAbb2LUV6Q","colab_type":"code","colab":{}},"source":["class Variational_Auto_Encoder():\n","  def __init__(self, input_dim, hidden_dims, latent_dim, kld_weight, epochs):\n","    self.input_dim = input_dim\n","    self.latent_dim = latent_dim\n","    self.hidden_encoder_dim1 = hidden_dims[0]\n","    self.hidden_encoder_dim2 = hidden_dims[1]\n","    self.hidden_decoder_dim1 = hidden_dims[2]\n","    self.hidden_decoder_dim2 = hidden_dims[3]\n","    self.kld_weight = kld_weight\n","    self.opt = Adam(lr=0.0001)\n","    self.epochs = epochs\n","\n","    #encoder\n","    logvar_prior = tf.keras.Input(shape=(self.latent_dim, ), name='logvar_prior')\n","    mu_prior = tf.keras.Input(shape=(self.latent_dim, ), name='mu_prior')\n","    inputs = tf.keras.layers.Input(shape=(self.input_dim, ), name='encoder_input')\n","    hidden1= tf.keras.layers.Dense(self.hidden_encoder_dim1, activation='relu', name='enc1') (inputs)\n","    hidden2 = tf.keras.layers.Dense(self.hidden_encoder_dim2, activation='relu', name='enc2') (hidden1)\n","    z_mean = tf.keras.layers.Dense(self.latent_dim, activation='linear', name='z_mean')(hidden2)\n","    z_log_var= tf.keras.layers.Dense(self.latent_dim, activation='linear', name='z_log_var')(hidden2)\n","    z = tf.keras.layers.Lambda(self.sampling, name='z')([z_mean, z_log_var])\n","    \n","    enc_outputs = [z_mean, z_log_var, z]\n","    encoder = tf.keras.models.Model(inputs, enc_outputs, name='encoder')\n","\n","    #decoder\n","    latent_inputs = tf.keras.layers.Input(shape=(self.latent_dim,), name='z_sampling')\n","    dec_hidden1 = tf.keras.layers.Dense(self.hidden_decoder_dim1, activation='relu', name='dec1') (latent_inputs)\n","    dec_hidden2 = tf.keras.layers.Dense(self.hidden_decoder_dim2, activation='relu', name='dec2') (dec_hidden1)\n","    outputs = tf.keras.layers.Dense(self.input_dim, activation='sigmoid') (dec_hidden2)\n","\n","    decoder = tf.keras.models.Model(latent_inputs, outputs, name='decoder')\n","\n","    #VAE(encoder+decoder)\n","    inputs_ = [inputs, logvar_prior, mu_prior]\n","    outputs_ = [ decoder(encoder(inputs)[2]), encoder(inputs)[0], encoder(inputs)[1] , encoder(inputs)[2]]  #output, mu, sigma\n","    self.VAE = tf.keras.models.Model(inputs_, outputs_, name='VAE')\n","    \n","    #Loss\n","    MSE = tf.reduce_sum( tf.math.squared_difference(K.flatten(outputs_[0]), K.flatten(inputs_[0])))\n","    KLD = - 0.5 * tf.reduce_sum(1 + logvar_prior + z_log_var\n","            - (tf.pow(z_mean - mu_prior, 2) \n","            + tf.exp(z_log_var))/tf.exp(logvar_prior))\n","    loss = tf.reduce_mean(MSE + KLD * self.kld_weight )\n","\n","    self.VAE.add_loss(loss)\n","\n","  def sampling(self, args):\n","    z_mean, z_log_var = args\n","    batch = K.shape(z_mean)[0]\n","    dim = K.int_shape(z_mean)[1]\n","    epsilon = K.random_normal(shape=(batch, dim))\n","    \n","    return z_mean + K.exp(0.5 * z_log_var) * epsilon\n","\n","  def compile(self):\n","    self.VAE.compile(optimizer=self.opt)\n","    #print (self.VAE.summary())\n","\n","  def learn(self, data, logvar_prior, mu_prior, verbose=True):\n","    result = self.VAE.fit([data, logvar_prior, mu_prior] , epochs=1, verbose=verbose)\n","    return result\n","\n","  def predict(self, data, logvar_prior, mu_prior, losses=False):\n","    reconst, mu, sigma, z = self.VAE.predict([data, logvar_prior, mu_prior])\n","    return reconst, mu, sigma, z\n","\n","  def plot(self, data, reconst, mu, sigma, z, losses, savepath):\n","    if losses != False:\n","      plt.title('loss')\n","      plt.plot(np.arange(self.epochs), losses)\n","      plt.savefig(savepath+'_loss.png')\n","      plt.close()\n","\n","    plt.title(\"z_alldim\")\n","    plt.plot(np.arange(mu.shape[0]), mu)\n","    plt.savefig(savepath+'_z.png')\n","    plt.close()\n","\n","    plt.title(\"z_hat_alldim\")\n","    plt.plot(np.arange(mu.shape[0]), z)\n","    plt.savefig(savepath+'_z_hat.png')\n","    plt.close()\n","\n","    plt.title('data_alldim')\n","    plt.plot(np.arange(mu.shape[0]), data)\n","    plt.savefig(savepath+'_oridata.png')\n","    plt.close()\n","\n","    plt.title('reconst_alldim')\n","    plt.plot(np.arange(mu.shape[0]), reconst)\n","    plt.savefig(savepath+'_reconst.png')\n","    plt.close()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v8MoFn55VSQ5","colab_type":"text"},"source":["### GaussianProcess"]},{"cell_type":"code","metadata":{"id":"seXBh3ADUy3T","colab_type":"code","colab":{}},"source":["%load_ext Cython"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"K7NUmCGtU00V","colab_type":"code","colab":{}},"source":["%%cython\n","import numpy as np\n","import random\n","import matplotlib.pyplot as plt\n","\n","cdef extern from \"math.h\":\n","    double exp(double)\n","    double sqrt(double)\n","    double log(double)\n","\n","cdef class GP:\n","    cdef double beta\n","    cdef int ns\n","    cdef xt, yt\n","    cdef double[:,:] i_cov\n","    cdef double[:] param\n","    cdef dict param_cache\n","\n","    cdef double covariance_func(self, double xi, double xj):\n","        cdef double theta0 = 1.0\n","        cdef double theta1 = 1.0\n","        cdef double theta2 = 0\n","        cdef double theta3 = 16.0\n","        return theta0 * exp(-0.5 * theta1 * (xi - xj) * (xi - xj)) + theta2 + theta3 * xi * xj\n","    \n","    cdef double normpdf(self, double x, double mu, double sigma):\n","        return 1./(sqrt(2*np.pi)*sigma)*exp(-0.5 * ((x - mu)/sigma)**2)\n","\n","    def __init__( self ):\n","        self.beta = 10.0\n","        self.param_cache = {}\n","\n","    def learn(self, xt, yt ):\n","        cdef int i, j\n","        self.xt = xt\n","        self.yt = yt\n","        self.ns = len(xt)\n","\n","        cdef double[:,:] cov = np.zeros((self.ns, self.ns))\n","\n","        for i in range(self.ns):\n","            for j in range(self.ns):\n","                cov[i,j] = self.covariance_func(xt[i], xt[j])\n","                if i==j:\n","                    cov[i,j] += 1/self.beta\n","\n","        self.i_cov = np.linalg.inv(cov)\n","        self.param = np.dot(self.i_cov, self.yt)\n","        self.param_cache.clear()\n","\n","    def plot(self, x):\n","        mus, sigmas = self.predict( x.reshape(-1,1) )\n","        plt.plot( x, mus )\n","        \n","        y_max = mus + np.sqrt(sigmas.flatten())\n","        y_min = mus - np.sqrt(sigmas.flatten())\n","\n","        plt.fill_between(x, y_min, y_max, facecolor=\"lavender\" , alpha=0.9 , edgecolor=\"lavender\"  )\n","        plt.plot(self.xt, self.yt)\n","        plt.show()\n","\n","\n","    def predict( self, x ):\n","        mus = []\n","        sigmas = []\n","        n = len(x)\n","        tt = [y - np.random.normal() / self.beta for y in self.yt]\n","        for k in range(n):\n","            v = np.zeros((self.ns))\n","            for i in range(self.ns):\n","                v[i] = self.covariance_func(x[k], self.xt[i])\n","            c = self.covariance_func(x[k], x[k]) + 1.0 / self.beta\n","            \n","            mu = np.dot(v, np.dot(self.i_cov, tt))\n","            sigma = c - np.dot(v, np.dot(self.i_cov, v))\n","            \n","            mus.append(mu)\n","            sigmas.append(sigma)\n","        \n","        return np.array(mus), np.array(sigmas)\n","    \n","\n","    cpdef double calc_lik_al( self, double[:] xs, double[:] ys ):\n","        cdef int k,i\n","        cdef int n = len(xs)\n","        cdef double lik = 0\n","        cdef int ns = self.ns\n","        cdef double c,p,mu,sigma\n","        cdef double[:] v= np.zeros((ns))\n","\n","        for k in range(n):\n","            # 計算結果をキャッシュして使い回す\n","            if xs[k] in self.param_cache:\n","                mu, sigma = self.param_cache[ xs[k] ]\n","            else:\n","                v = np.zeros((ns))\n","                for i in range(ns):\n","                    v[i] = self.covariance_func(xs[k], self.xt[i])\n","                c = self.covariance_func(xs[k], xs[k]) + 1.0 / self.beta\n","                mu = np.dot(v, self.param)\n","                sigma = c - np.dot(v, np.dot(self.i_cov, v))\n","                \n","                self.param_cache[ xs[k] ] = (mu, sigma)\n","\n","            p = self.normpdf( ys[k] , mu, sigma )\n","            if p<=0:\n","                p = 0.000000000001\n","            lik += log( p )\n","\n","        return lik\n","\n","\n","    def calc_lik( self, xs, ys ):\n","      lik = self.calc_lik_al( xs, ys )\n","      return lik"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WTHGGvRRaUFb","colab_type":"text"},"source":["### logsum"]},{"cell_type":"code","metadata":{"id":"tmlzDvM2aV6T","colab_type":"code","colab":{}},"source":["%%cython\n","import numpy as np\n","import random\n","import matplotlib.mlab as mlab\n","import sys\n","\n","cdef extern from \"math.h\":\n","    double log(double)\n","    double exp(double)\n","\n","\n","cpdef logsumexp( double[:,:] a ):\n","    cdef double max_val = -sys.float_info.max\n","    cdef double sum_exp = 0\n","    cdef int I = a.shape[0]\n","    cdef int J = a.shape[1]\n","    \n","    for i in range(I):\n","        for j in range(J):\n","            if max_val<a[i,j]:\n","                max_val = a[i,j]\n","                \n","    for i in range(I):\n","        for j in range(J):\n","            sum_exp += exp( a[i,j] - max_val )\n","    return log(sum_exp) + max_val"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pAbp3HAOWnVW","colab_type":"text"},"source":["### multidim"]},{"cell_type":"code","metadata":{"id":"a8FhZCwMWp0d","colab_type":"code","colab":{}},"source":["class GPMD:\n","    def __init__(self, dim):\n","        self.__dim = dim\n","        self.__gp = [ GP() for d in range(self.__dim) ]\n","\n","    def learn(self,x, y ):\n","        y = np.array(y, dtype=np.float).reshape( (-1,self.__dim) )\n","        x = np.array(x,dtype=np.float)\n","\n","        for d in range(self.__dim):\n","            if len(y)!=0:\n","                self.__gp[d].learn( x, y[:,d] )\n","            else:\n","                self.__gp[d].learn( x, [] )\n","\n","\n","    def calc_lik(self, x, y, last = False):\n","        lik = 0.0\n","        mus = []\n","        sigmas = []\n","\n","        if self.__dim==1:\n","            y = np.asarray(y, dtype=np.float).reshape( (-1,self.__dim) )\n","        for d in range(self.__dim):\n","            lik += self.__gp[d].calc_lik( x , y[:,d] )\n","            if last != False:\n","              mu , sig = self.__gp[d].predict(x)\n","              mus.append(mu)\n","              sigmas.append(sig)\n","\n","        if last != False:\n","          return lik, np.array(mus), np.array(sigmas)\n","        else:\n","          return lik\n","\n","    def plot(self, x ):\n","        for d in range(self.__dim):\n","            plt.subplot( self.__dim, 1, d+1 )\n","\n","            mus, sigmas = self.__gp[d].predict(x)\n","            y_min = mus - sigmas*2\n","            y_max = mus + sigmas*2\n","\n","            plt.fill_between( x, y_min, y_max, facecolor=\"lavender\" , alpha=0.9 , edgecolor=\"lavender\"  )\n","            plt.plot(x, y_min, 'b--')\n","            plt.plot(x, mus, 'b-')\n","            plt.plot(x, y_max, 'b--')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2ibGl4zBWqVg","colab_type":"text"},"source":["### segmentation"]},{"cell_type":"code","metadata":{"id":"-0BfwNmBWtc9","colab_type":"code","colab":{}},"source":["class GPSegmentation():\n","    def __init__(self, dim, gamma, alpha, initial_class):\n","        self.dim = dim\n","        self.numclass = initial_class\n","        self.segmlen = 3\n","        self.gps = [ GPMD(dim) for i in range(self.numclass) ]\n","        self.segm_in_class= [ [] for i in range(self.numclass) ]\n","        self.segmclass = {}\n","        self.segments = []\n","        self.trans_prob = np.ones( (1,1) )\n","        self.trans_prob_bos = np.ones( 1 )\n","        self.trans_prob_eos = np.ones( 1 )\n","        self.all_numclass = []\n","        self.counter = 0\n","        self.is_initialized = False\n","        \n","        # parameters\n","        self.MAX_LEN = 20\n","        self.MIN_LEN = 3\n","        self.AVE_LEN = 12\n","        self.SKIP_LEN = 1\n","\n","        self.alpha = alpha\n","        self.beta = np.ones(1)\n","        self.gamma = gamma\n","\n","    def load_data(self, zs, classfile=None ):\n","        self.data = []\n","        self.segments = []\n","        self.is_initialized = False\n","\n","        for y in zs:\n","            segm = []\n","            self.data.append( np.array(y, dtype=np.float) )\n","\n","            i = 0\n","            while i<len(y):\n","                length = random.randint(self.MIN_LEN, self.MAX_LEN)\n","\n","                if i+length+1>=len(y):\n","                    length = len(y)-i\n","\n","                segm.append( y[i:i+length+1] )\n","\n","                i+=length\n","\n","            self.segments.append( segm )\n","\n","            for i,s in enumerate(segm):\n","                c = random.randint(0,self.numclass-1)\n","                self.segmclass[id(s) ] = c\n","\n","        self.calc_trans_prob()\n","\n","\n","    def load_model( self, basename ):\n","        for c in range(self.numclass):\n","            filename = basename + \"class%03d.npy\" % c\n","            self.segm_in_class[c] = np.load( filename, allow_pickle=True)\n","            self.update_gp( c )\n","\n","        self.trans_prob = np.load( basename+\"trans.npy\", allow_pickle=True )\n","        self.trans_prob_bos = np.load( basename+\"trans_bos.npy\", allow_pickle=True )\n","        self.trans_prob_eos = np.load( basename+\"trans_eos.npy\", allow_pickle=True )\n","\n","\n","    def update_gp(self, c ):\n","        datay = []\n","        datax = []\n","        for s in self.segm_in_class[c]:\n","            datay += [ y for y in s ]\n","            datax += range(len(s))\n","\n","        self.gps[c].learn( datax, datay )\n","\n","\n","    def calc_emission_logprob( self, c, segm ):\n","        gp = self.gps[c]\n","        slen = len(segm)\n","\n","        if len(segm) > 2:\n","            log_plen = (slen*math.log(self.AVE_LEN) + (-self.AVE_LEN)*math.log(math.e)) - (sum(np.log(np.arange(1,slen+1))))\n","            p = gp.calc_lik( np.arange(len(segm), dtype=np.float) , segm )\n","            return p + log_plen\n","        else:\n","            return math.log(1.0e-100)\n","\n","    def save_model(self, basename ):\n","        if not os.path.exists(basename):\n","            os.mkdir( basename )\n","\n","        for n,segm in enumerate(self.segments):\n","            classes = []\n","            cut_points = []\n","            for s in segm:\n","                c = self.segmclass[id(s)]\n","                classes += [ c for i in range(len(s)) ]\n","                cut_points += [0] * len(s)\n","                cut_points[-1] = 1\n","            np.savetxt( basename+\"segm%03d.txt\" % n, np.vstack([classes,cut_points]).T, fmt=str(\"%d\") )\n","\n","        for c in range(len(self.gps)):\n","            for d in range(self.dim):\n","                plt.clf()\n","                for data in self.segm_in_class[c]:\n","                    if self.dim==1:\n","                        plt.plot( range(len(data)), data, \"o-\" )\n","                    else:\n","                        plt.plot( range(len(data[:,d])), data[:,d], \"o-\" )\n","                    plt.ylim( -1, 1 )\n","                plt.savefig( basename+\"class%03d_dim%03d.png\" % (c, d) )\n","                plt.close()\n","\n","        np.save( basename + \"trans.npy\" , self.trans_prob  )\n","        np.save( basename + \"trans_bos.npy\" , self.trans_prob_bos )\n","        np.save( basename + \"trans_eos.npy\" , self.trans_prob_eos )\n","        np.save( basename + \"all_class.npy\", self.segm_in_class[c])\n","\n","        for c in range(self.numclass):\n","            np.save( basename+\"class%03d.npy\" % c, self.segm_in_class[c] )\n","\n","        return self.numclass\n","\n","\n","    def forward_filtering(self, d ):\n","        T = len(d)\n","        log_a = np.log( np.zeros( (len(d), self.MAX_LEN, self.numclass) )  + 1.0e-100 ) \n","        valid = np.zeros( (len(d), self.MAX_LEN, self.numclass) ) \n","        z = np.ones( T )\n","\n","        for t in range(T):\n","            for k in range(self.MIN_LEN,self.MAX_LEN,self.SKIP_LEN):\n","                if t-k<0:\n","                    break\n","\n","                segm = d[t-k:t+1]\n","                for c in range(self.numclass):\n","                    out_prob = self.calc_emission_logprob( c, segm )\n","                    foward_prob = 0.0\n","\n","                    tt = t-k-1\n","                    if tt>=0:\n","                        foward_prob = logsumexp( log_a[tt,:,:] + z[tt] + np.log(self.trans_prob[:,c]) ) + out_prob\n","                    else:\n","                        foward_prob = out_prob + math.log(self.trans_prob_bos[c])\n","\n","                    if t==T-1:\n","                        foward_prob += math.log(self.trans_prob_eos[c])\n","\n","                    log_a[t,k,c] = foward_prob\n","                    valid[t,k,c] = 1.0\n","                    if math.isnan(foward_prob):\n","                        print( \"a[t=%d,k=%d,c=%d] became NAN!!\" % (t,k,c) )\n","                        sys.exit(-1)\n","\n","            if t-self.MIN_LEN>=0:\n","                z[t] = logsumexp( log_a[t,:,:] )\n","                log_a[t,:,:] -= z[t]\n","\n","        return np.exp(log_a)*valid\n","\n","\n","    def sample_idx(self, prob ):\n","        accm_prob = [0,] * len(prob)\n","        for i in range(len(prob)):\n","            accm_prob[i] = prob[i] + accm_prob[i-1]\n","\n","        rnd = random.random() * accm_prob[-1]\n","        for i in range(len(prob)):\n","            if rnd <= accm_prob[i]:\n","                return i\n","\n","\n","    def backward_sampling(self, a, d):\n","        T = a.shape[0]\n","        t = T-1\n","\n","        segm = []\n","        segm_class = []\n","\n","        c = -1\n","        while True:\n","            if t==T-1:\n","                transp = self.trans_prob_eos\n","            else:\n","                transp = self.trans_prob[:,c]\n","            \n","            idx = self.sample_idx( a[t].reshape( self.MAX_LEN*self.numclass ))\n","\n","            k = int(idx/self.numclass)\n","            c = idx % self.numclass\n","\n","            if t-k-1<=0:\n","                s = d[0:t+1]\n","            else:\n","                s = d[t-k:t+1]\n","\n","            segm.insert( 0, s )\n","            segm_class.insert( 0, c )\n","\n","            t = t-k-1\n","\n","            if t<=0:\n","                break\n","\n","        return segm, segm_class\n","\n","\n","    def calc_trans_prob( self ):\n","        self.trans_prob = np.zeros( (self.numclass,self.numclass) )\n","        self.trans_prob_bos = np.zeros( self.numclass )\n","        self.trans_prob_eos = np.zeros( self.numclass )\n","\n","        for n,segm in enumerate(self.segments):\n","            if id(segm[0]) in self.segmclass:\n","                c_begin = self.segmclass[ id(segm[0]) ]\n","                self.trans_prob_bos[c_begin]+=1\n","\n","            if id(segm[-1]) in self.segmclass:\n","                c_end = self.segmclass[ id(segm[-1]) ]\n","                self.trans_prob_eos[c_end]+=1\n","\n","            for i in range(1,len(segm)):\n","                try:\n","                    cc = self.segmclass[ id(segm[i-1]) ]\n","                    c = self.segmclass[ id(segm[i]) ]\n","                except KeyError:\n","\n","                    continue\n","                self.trans_prob[cc,c] += 1\n","\n","        self.trans_prob_bos += self.alpha * self.beta\n","        self.trans_prob_eos += self.alpha * self.beta\n","\n","        for c in range(self.numclass):\n","            self.trans_prob[c,:] += self.alpha * self.beta\n","\n","        self.trans_prob = self.trans_prob / self.trans_prob.sum(1).reshape(self.numclass,1)\n","        self.trans_prob_bos = self.trans_prob_bos / np.sum( self.trans_prob_bos )\n","        self.trans_prob_eos = self.trans_prob_eos / np.sum( self.trans_prob_eos )\n","\n","\n","    def sample_num_states(self):\n","\n","        # calculate u\n","        u = []\n","        for n,segm in enumerate(self.segments):\n","            c = self.segmclass[ id(segm[0]) ]\n","            p = self.trans_prob_bos[c]\n","            u.append( random.random() * p )\n","\n","            c = self.segmclass[ id(segm[-1]) ]\n","            p = self.trans_prob_eos[c]\n","            u.append( random.random() * p )\n","\n","            for i in range(1,len(segm)):\n","                cc = self.segmclass[ id(segm[i-1]) ]\n","                c = self.segmclass[ id(segm[i]) ]\n","                p = self.trans_prob[cc,c]\n","                u.append( random.random() * p )\n","\n","        # remove \n","        beta = list( self.beta )\n","        for c in range(self.numclass)[::-1]:\n","            if len(self.segm_in_class[c])==0:\n","                self.numclass -= 1\n","                self.gps.pop()\n","                self.segm_in_class.pop()\n","                beta[-2] += beta[-1]\n","                beta.pop()\n","                #print (\"pop!\")\n","            else:\n","                break\n","\n","        u_min = np.min( u )\n","\n","        N = 0\n","        for c in range(self.numclass):\n","            N += len(self.segm_in_class[c])\n","\n","        while self.alpha*beta[-1]/N > u_min:\n","            stick_len = beta[-1]\n","            rnd = np.random.beta(1,self.gamma)\n","            beta[-1] = stick_len * rnd\n","            beta.append( stick_len * (1-rnd) )\n","            self.numclass += 1\n","            self.gps.append( GPMD(self.dim) )\n","            self.segm_in_class.append([])\n","\n","        self.beta = np.array( beta )\n","\n","        self.all_numclass.append(self.numclass)\n","    \n","    \n","    # If list.remove( elem ), ValueError.\n","    def remove_ndarray(self, lst, elem ):\n","        l = len(elem)\n","        for i,e in enumerate(lst):\n","            if len(e)!=l:\n","                continue\n","            if (e==elem).all():\n","                lst.pop(i)\n","                return\n","        raise ValueError( \"ndarray is not found!!\" )\n","\n","    def learn(self):\n","        if self.is_initialized==False:\n","            # learn GP\n","            for i in range(len(self.segments)):\n","                for s in self.segments[i]:\n","                    c = self.segmclass[id(s)]\n","                    self.segm_in_class[c].append( s )\n","\n","            # learn each classes\n","            for c in range(self.numclass):\n","                self.update_gp( c )\n","\n","            self.is_initialized = True\n","\n","        self.update(True)\n","\n","    def recog(self):\n","        self.update(False)\n","\n","    def update(self, learning_phase=True ):\n","\n","        for i in range(len(self.segments)):\n","            if learning_phase:\n","                print (\"slice sampling\")\n","                self.sample_num_states()\n","            \n","            d = self.data[i]\n","            segm = self.segments[i]\n","\n","            for s in segm:\n","                c = self.segmclass[id(s)]\n","                self.segmclass.pop( id(s) )\n","\n","                if learning_phase:\n","                    # update parameter\n","                    self.remove_ndarray( self.segm_in_class[c], s )\n","\n","            if learning_phase:\n","                # update GP\n","                for c in range(self.numclass):\n","                    self.update_gp( c )\n","\n","                # update transition probability\n","                self.calc_trans_prob()\n","\n","            start = time.clock()\n","            print( \"forward...\", end=\"\")\n","            a = self.forward_filtering( d )\n","\n","            print( \"backward...\", end=\"\" )\n","            segm, segm_class = self.backward_sampling( a, d )\n","            print( time.clock()-start, \"sec\" )\n","\n","            print( \"Number of classified segments: [\", end=\"\")\n","            for s in self.segm_in_class:\n","                print( len(s), end=\" \" )\n","            print( \"]\" )\n","\n","\n","            self.segments[i] = segm\n","\n","            for s,c in zip( segm, segm_class ):\n","                self.segmclass[id(s)] = c\n","\n","                # update parameter\n","                if learning_phase:\n","                    self.segm_in_class[c].append(s)\n","\n","            if learning_phase:\n","                # update GP\n","                for c in range(self.numclass):\n","                    self.update_gp( c )\n","\n","                # update transition probability\n","                self.calc_trans_prob()\n","        return\n","\n","\n","    def calc_lik(self, last=False):\n","        liks = 0\n","        mus_all = []\n","        sigmas_all = []\n","\n","        for segm in self.segments:\n","            # last\n","            if last != False:\n","              mus = [[] for i in range(self.dim)]\n","              sigmas = [[] for i in range(self.dim)]\n","\n","            for n, s in enumerate(segm):\n","                c = self.segmclass[id(s)]\n","                liks += self.gps[c].calc_lik( np.arange(len(s),dtype=np.float) , np.array(s) )\n","                \n","                # last\n","                if last != False:\n","                  lik, mu, sig = self.gps[c].calc_lik( np.arange(len(s), dtype=np.float) , s , last)\n","                  if n == 0:\n","                    for dd in range(self.dim):\n","                        mus[dd] = mu[dd]\n","                        sigmas[dd] = sig[dd]\n","                  else:\n","                    for dd in range(self.dim):\n","                        mus[dd] = np.concatenate([mus[dd], mu[dd]])\n","                        sigmas[dd] = np.concatenate([sigmas[dd], sig[dd]])\n","\n","                  liks += lik\n","\n","            # last\n","            if last != False:\n","              mus_all.append((np.array(mus).T).astype(np.float32))\n","              sigmas_all.append(np.log((np.array(sigmas).T).astype(np.float32)))\n","\n","        #last\n","        if last != False:\n","          return liks, mus_all, sigmas_all\n","        else:\n","          return liks\n","\n","    \n","    def get_num_class(self):\n","        n = 0\n","        for c in range(self.numclass):\n","            if len(self.segm_in_class[c])!=0:\n","                n += 1\n","        return n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w21E05WtWt66","colab_type":"text"},"source":["### main_segm"]},{"cell_type":"code","metadata":{"id":"ws1Ve9DCWv1q","colab_type":"code","colab":{}},"source":["def learn( zs, savedir, dim, gamma, eta, initial_class ):\n","    gpsegm = GPSegmentation( dim, gamma, eta, initial_class)\n","\n","    gpsegm.load_data( zs )\n","    liks = []\n","\n","    start_time = time.time()\n","    #iteration (default: 10)\n","    for it in range( 8 ):\n","        print( \"-----\", it, \"-----\" )\n","        gpsegm.learn()\n","        numclass = gpsegm.save_model( savedir )\n","        print( \"lik =\", gpsegm.calc_lik() )\n","        liks.append(gpsegm.calc_lik())\n","    #print (\"liks: \",liks)\n","    print ('%.2f[sec]'%(time.time()-start_time))\n","    \n","    #plot liks\n","    plt.clf()\n","    plt.plot( range(len(liks)), liks )\n","    plt.savefig( os.path.join( savedir,\"liks.png\") )\n","\n","    lik, mu, sigma = gpsegm.calc_lik(last=True)\n","    return numclass, np.array(mu), np.array(sigma)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BtlVr6eDTiiq","colab_type":"text"},"source":["### main"]},{"cell_type":"code","metadata":{"id":"1MZ7KwpjVAzw","colab_type":"code","colab":{}},"source":["def main():\n","    hidden_dim = [40,20,20,40]\n","    latent_dim= 3\n","    \n","    #weight of KLD\n","    kld_weight = 0.9\n","    #number of learn of vae in an iteration \n","    epochs = 100\n","    #mutual learning loop (VAE and HDP-GP-HSMM)\n","    iteration = 10\n","\n","    data_ = []\n","    batch_sizes = []\n","    logvar_priors = []\n","    mu_priors = []\n","\n","    #pathの変更をしてください．\n","    files =  [ \"chickendance%03d.txt\" % j for j in range(4) ]\n","    for f in files:\n","      y = np.loadtxt(f, dtype=np.float)[::15]\n","      #print (len(y))\n","      data_.append( y )\n","      batch_sizes.append( int(len(y)/4) )\n","\n","      logvar_priors.append( np.array( np.zeros( (len(y),latent_dim) ), dtype='float32' ) )\n","      mu_priors.append( np.array( np.zeros( (len(y),latent_dim) ), dtype='float32' ) )\n","\n","    input_dim=len(data_[0][0])\n","\n","    #HDP-GP-HSMM parameters\n","    gamma = 1.0\n","    eta = 10.0\n","    initial_class = 1\n","\n","    #define VAE\n","    vae = Variational_Auto_Encoder(input_dim, hidden_dim, latent_dim, kld_weight, epochs)\n","    vae.compile()\n","\n","    path = ('HVGH/')\n","    #learn VAE and HSP-GP-HSMM\n","    for ite in range(iteration):\n","      print (\"*--------------iteration:%03d--------------*\"%ite)\n","      zs = []\n","      for n, data in enumerate(data_):\n","        losses = []\n","        #start_time = time.time()\n","\n","        for e in range(epochs):\n","          idx = np.random.choice(range(0, len(data)), batch_sizes[n])\n","          result = vae.learn(data[idx], logvar_priors[n][idx], mu_priors[n][idx], verbose=0)\n","          losses.append(result.history['loss'])\n","        \n","        #print ('%.2f[sec]'%(time.time()-start_time))\n","        #predicts\n","        reconst, mu, sigma, z = vae.predict(data, logvar_priors[n], mu_priors[n], losses)\n","        savepath = (path+'HVGHlearn/%03d/'%ite)\n","        if not os.path.exists(savepath):\n","          os.makedirs(savepath)\n","        savepath_ = (savepath + 'data_%03d'%n)\n","        vae.plot(data, reconst, mu, sigma, z, losses, savepath_)\n","        print ('VAE learned', 'iteration:', ite, 'data:', n)\n","\n","        zs.append(np.array(mu))\n","        np.savetxt(savepath_+'_z.txt', mu)\n","        \n","      #vae.save_weights(savepath+'vae_weights.hdf5')\n","      vae.VAE.save_weights(savepath+'vae_weights.hdf5')\n","\n","      # HDP-GP-HSMM\n","      #learn\n","      z_dim = len(zs[0][0])\n","      recog_initial_class, mu_priors, logvar_priors = learn( zs, savepath, z_dim, gamma, eta, initial_class )"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V3NIpYNyTTjV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"9a7fb249-9175-478f-fb25-00a874d7ff78","executionInfo":{"status":"ok","timestamp":1587448538541,"user_tz":-540,"elapsed":1018740,"user":{"displayName":"長野匡隼","photoUrl":"","userId":"15635473969771913691"}}},"source":["main()"],"execution_count":13,"outputs":[{"output_type":"stream","text":["*--------------iteration:000--------------*\n","VAE learned iteration: 0 data: 0\n","VAE learned iteration: 0 data: 1\n","VAE learned iteration: 0 data: 2\n","VAE learned iteration: 0 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.5501259999999988 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.5506029999999988 sec\n","Number of classified segments: [19 0 10 10 ]\n","slice sampling\n","forward...backward...0.660381000000001 sec\n","Number of classified segments: [9 0 12 22 0 ]\n","slice sampling\n","forward...backward...0.634684 sec\n","Number of classified segments: [2 10 12 22 8 ]\n","lik = 904.2939711193421\n","----- 1 -----\n","slice sampling\n","forward...backward...0.6254059999999981 sec\n","Number of classified segments: [18 10 2 12 8 ]\n","slice sampling\n","forward...backward...0.6364620000000016 sec\n","Number of classified segments: [18 10 18 0 8 ]\n","slice sampling\n","forward...backward...0.6443749999999966 sec\n","Number of classified segments: [16 0 33 0 0 ]\n","slice sampling\n","forward...backward...0.6507660000000044 sec\n","Number of classified segments: [2 0 33 18 0 ]\n","lik = 822.9336028446046\n","----- 2 -----\n","slice sampling\n","forward...backward...0.8385790000000028 sec\n","Number of classified segments: [17 0 15 18 1 0 0 ]\n","slice sampling\n","forward...backward...0.7365159999999946 sec\n","Number of classified segments: [17 0 14 18 1 0 ]\n","slice sampling\n","forward...backward...0.7442569999999975 sec\n","Number of classified segments: [15 0 24 0 1 0 ]\n","slice sampling\n","forward...backward...0.735514000000002 sec\n","Number of classified segments: [2 0 24 15 1 0 ]\n","lik = 792.2857894501321\n","----- 3 -----\n","slice sampling\n","forward...backward...0.6065200000000033 sec\n","Number of classified segments: [17 1 10 15 1 ]\n","slice sampling\n","forward...backward...0.8234929999999991 sec\n","Number of classified segments: [17 1 13 15 1 0 0 ]\n","slice sampling\n","forward...backward...0.8616519999999994 sec\n","Number of classified segments: [15 1 25 0 2 0 0 ]\n","slice sampling\n","forward...backward...0.838948000000002 sec\n","Number of classified segments: [2 0 25 8 7 1 1 ]\n","lik = 655.0656673602439\n","----- 4 -----\n","slice sampling\n","forward...backward...1.3804099999999977 sec\n","Number of classified segments: [16 1 12 8 7 1 1 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9659829999999943 sec\n","Number of classified segments: [16 1 10 8 5 1 1 0 ]\n","slice sampling\n","forward...backward...0.8496820000000014 sec\n","Number of classified segments: [14 1 23 0 0 0 1 ]\n","slice sampling\n","forward...backward...0.8286510000000007 sec\n","Number of classified segments: [1 1 23 1 0 0 15 ]\n","lik = 689.6825691543958\n","----- 5 -----\n","slice sampling\n","forward...backward...1.0197900000000004 sec\n","Number of classified segments: [15 3 13 1 0 0 15 0 0 ]\n","slice sampling\n","forward...backward...0.8389409999999984 sec\n","Number of classified segments: [15 3 11 1 0 0 14 ]\n","slice sampling\n","forward...backward...0.8433240000000026 sec\n","Number of classified segments: [14 2 24 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9327080000000052 sec\n","Number of classified segments: [0 6 24 9 0 5 0 0 ]\n","lik = 616.408524446357\n","----- 6 -----\n","slice sampling\n","forward...backward...1.0341399999999936 sec\n","Number of classified segments: [5 15 13 9 0 5 1 0 0 ]\n","slice sampling\n","forward...backward...0.8429650000000066 sec\n","Number of classified segments: [5 15 12 9 0 5 1 ]\n","slice sampling\n","forward...backward...0.8515900000000016 sec\n","Number of classified segments: [5 9 24 0 0 0 1 ]\n","slice sampling\n","forward...backward...0.8338640000000055 sec\n","Number of classified segments: [0 0 24 5 1 2 9 ]\n","lik = 655.9996400785901\n","----- 7 -----\n","slice sampling\n","forward...backward...0.807235999999989 sec\n","Number of classified segments: [7 0 12 5 10 2 10 ]\n","slice sampling\n","forward...backward...0.8435889999999944 sec\n","Number of classified segments: [7 0 12 5 10 2 10 ]\n","slice sampling\n","forward...backward...0.8645369999999986 sec\n","Number of classified segments: [7 0 24 0 9 1 1 ]\n","slice sampling\n","forward...backward...0.8340940000000074 sec\n","Number of classified segments: [0 0 24 0 0 7 12 ]\n","lik = 422.2377418378288\n","70.54[sec]\n","*--------------iteration:001--------------*\n","VAE learned iteration: 1 data: 0\n","VAE learned iteration: 1 data: 1\n","VAE learned iteration: 1 data: 2\n","VAE learned iteration: 1 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.5519930000000102 sec\n","Number of classified segments: [21 0 0 0 ]\n","slice sampling\n","forward...backward...0.6435359999999974 sec\n","Number of classified segments: [30 0 0 1 0 ]\n","slice sampling\n","forward...backward...0.8195340000000044 sec\n","Number of classified segments: [24 0 0 21 0 0 0 ]\n","slice sampling\n","forward...backward...0.5568470000000048 sec\n","Number of classified segments: [30 0 0 21 ]\n","lik = 343.873611185359\n","----- 1 -----\n","slice sampling\n","forward...backward...0.628848000000005 sec\n","Number of classified segments: [14 12 5 20 0 ]\n","slice sampling\n","forward...backward...0.6276820000000072 sec\n","Number of classified segments: [14 12 5 17 0 ]\n","slice sampling\n","forward...backward...0.8230959999999925 sec\n","Number of classified segments: [1 12 5 35 0 0 0 ]\n","slice sampling\n","forward...backward...0.640277999999995 sec\n","Number of classified segments: [15 0 0 35 0 ]\n","lik = 855.9026931390135\n","----- 2 -----\n","slice sampling\n","forward...backward...0.7345499999999987 sec\n","Number of classified segments: [24 3 0 18 0 0 ]\n","slice sampling\n","forward...backward...0.7528679999999923 sec\n","Number of classified segments: [24 3 0 17 0 0 ]\n","slice sampling\n","forward...backward...0.6438150000000036 sec\n","Number of classified segments: [9 3 0 34 0 ]\n","slice sampling\n","forward...backward...0.5555460000000068 sec\n","Number of classified segments: [15 0 0 36 ]\n","lik = 738.1183876369164\n","----- 3 -----\n","slice sampling\n","forward...backward...0.7429050000000075 sec\n","Number of classified segments: [26 3 0 19 0 0 ]\n","slice sampling\n","forward...backward...1.2755219999999952 sec\n","Number of classified segments: [26 3 0 17 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6513429999999971 sec\n","Number of classified segments: [11 3 0 30 0 ]\n","slice sampling\n","forward...backward...0.6488120000000066 sec\n","Number of classified segments: [14 0 0 32 0 ]\n","lik = 824.4841301321916\n","----- 4 -----\n","slice sampling\n","forward...backward...0.5404370000000114 sec\n","Number of classified segments: [20 1 1 17 ]\n","slice sampling\n","forward...backward...0.9401340000000005 sec\n","Number of classified segments: [20 1 1 16 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6491100000000074 sec\n","Number of classified segments: [6 1 1 29 0 ]\n","slice sampling\n","forward...backward...0.6407650000000018 sec\n","Number of classified segments: [7 11 0 29 0 ]\n","lik = 1124.4251601504818\n","----- 5 -----\n","slice sampling\n","forward...backward...0.7242300000000057 sec\n","Number of classified segments: [19 11 0 15 0 0 ]\n","slice sampling\n","forward...backward...0.8307049999999947 sec\n","Number of classified segments: [19 11 0 14 0 0 0 ]\n","slice sampling\n","forward...backward...0.8541219999999896 sec\n","Number of classified segments: [12 0 0 28 0 0 0 ]\n","slice sampling\n","forward...backward...0.7431819999999902 sec\n","Number of classified segments: [13 0 0 31 0 0 ]\n","lik = 729.3926187612345\n","----- 6 -----\n","slice sampling\n","forward...backward...0.6451739999999972 sec\n","Number of classified segments: [19 1 1 17 0 ]\n","slice sampling\n","forward...backward...0.6528930000000059 sec\n","Number of classified segments: [19 1 1 17 0 ]\n","slice sampling\n","forward...backward...0.7235479999999939 sec\n","Number of classified segments: [6 1 1 28 0 0 ]\n","slice sampling\n","forward...backward...0.6311000000000035 sec\n","Number of classified segments: [7 11 0 28 0 ]\n","lik = 1143.7466888332237\n","----- 7 -----\n","slice sampling\n","forward...backward...0.6103610000000117 sec\n","Number of classified segments: [19 11 0 14 0 ]\n","slice sampling\n","forward...backward...0.7458760000000098 sec\n","Number of classified segments: [19 11 0 14 0 0 ]\n","slice sampling\n","forward...backward...0.8192289999999787 sec\n","Number of classified segments: [12 0 0 28 0 0 0 ]\n","slice sampling\n","forward...backward...0.691724999999991 sec\n","Number of classified segments: [14 0 0 30 0 ]\n","lik = 765.8552085293778\n","61.03[sec]\n","*--------------iteration:002--------------*\n","VAE learned iteration: 2 data: 0\n","VAE learned iteration: 2 data: 1\n","VAE learned iteration: 2 data: 2\n","VAE learned iteration: 2 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.6400739999999985 sec\n","Number of classified segments: [23 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.4492310000000259 sec\n","Number of classified segments: [23 0 0 ]\n","slice sampling\n","forward...backward...0.4669010000000071 sec\n","Number of classified segments: [29 0 0 ]\n","slice sampling\n","forward...backward...0.5485920000000135 sec\n","Number of classified segments: [28 0 0 0 ]\n","lik = 255.5522477779321\n","----- 1 -----\n","slice sampling\n","forward...backward...0.824401000000023 sec\n","Number of classified segments: [27 9 2 0 0 0 0 ]\n","slice sampling\n","forward...backward...1.0290789999999959 sec\n","Number of classified segments: [33 9 2 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5512999999999977 sec\n","Number of classified segments: [46 9 2 0 ]\n","slice sampling\n","forward...backward...0.5555699999999888 sec\n","Number of classified segments: [47 1 4 0 ]\n","lik = 1150.011431628275\n","----- 2 -----\n","slice sampling\n","forward...backward...0.6338949999999954 sec\n","Number of classified segments: [27 6 17 0 0 ]\n","slice sampling\n","forward...backward...0.6358899999999892 sec\n","Number of classified segments: [26 6 17 0 0 ]\n","slice sampling\n","forward...backward...0.7416870000000131 sec\n","Number of classified segments: [39 5 13 0 0 0 ]\n","slice sampling\n","forward...backward...0.628216000000009 sec\n","Number of classified segments: [41 0 14 0 0 ]\n","lik = 1228.7774342165558\n","----- 3 -----\n","slice sampling\n","forward...backward...0.5263099999999952 sec\n","Number of classified segments: [22 0 28 0 ]\n","slice sampling\n","forward...backward...0.7258630000000039 sec\n","Number of classified segments: [20 0 28 0 0 0 ]\n","slice sampling\n","forward...backward...0.46581299999999715 sec\n","Number of classified segments: [36 0 14 ]\n","slice sampling\n","forward...backward...0.8286060000000077 sec\n","Number of classified segments: [38 0 12 0 0 0 0 ]\n","lik = 1223.467369348158\n","----- 4 -----\n","slice sampling\n","forward...backward...0.4430270000000007 sec\n","Number of classified segments: [20 0 24 ]\n","slice sampling\n","forward...backward...0.5375899999999945 sec\n","Number of classified segments: [19 0 24 0 ]\n","slice sampling\n","forward...backward...0.5654739999999947 sec\n","Number of classified segments: [34 0 12 0 ]\n","slice sampling\n","forward...backward...0.4707120000000202 sec\n","Number of classified segments: [36 0 12 ]\n","lik = 1225.977609690726\n","----- 5 -----\n","slice sampling\n","forward...backward...0.44419500000000767 sec\n","Number of classified segments: [19 0 24 ]\n","slice sampling\n","forward...backward...0.7485299999999881 sec\n","Number of classified segments: [18 0 24 0 0 0 ]\n","slice sampling\n","forward...backward...0.8525410000000022 sec\n","Number of classified segments: [32 0 12 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.450821000000019 sec\n","Number of classified segments: [34 0 12 ]\n","lik = 1220.8961525078207\n","----- 6 -----\n","slice sampling\n","forward...backward...0.5458039999999755 sec\n","Number of classified segments: [18 0 24 0 ]\n","slice sampling\n","forward...backward...0.4570839999999805 sec\n","Number of classified segments: [17 0 24 ]\n","slice sampling\n","forward...backward...1.2557930000000113 sec\n","Number of classified segments: [31 0 12 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5507979999999861 sec\n","Number of classified segments: [33 0 12 0 ]\n","lik = 1206.2895209309652\n","----- 7 -----\n","slice sampling\n","forward...backward...0.6389400000000194 sec\n","Number of classified segments: [18 0 24 0 0 ]\n","slice sampling\n","forward...backward...0.732389000000012 sec\n","Number of classified segments: [16 0 24 0 0 0 ]\n","slice sampling\n","forward...backward...0.8340780000000052 sec\n","Number of classified segments: [29 0 12 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9433219999999949 sec\n","Number of classified segments: [30 0 13 0 0 0 0 0 ]\n","lik = 1235.755468193758\n","58.63[sec]\n","*--------------iteration:003--------------*\n","VAE learned iteration: 3 data: 0\n","VAE learned iteration: 3 data: 1\n","VAE learned iteration: 3 data: 2\n","VAE learned iteration: 3 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.7431580000000224 sec\n","Number of classified segments: [24 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7263829999999984 sec\n","Number of classified segments: [22 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7223790000000179 sec\n","Number of classified segments: [20 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8210909999999956 sec\n","Number of classified segments: [24 0 0 0 0 0 0 ]\n","lik = 762.9978706522652\n","----- 1 -----\n","slice sampling\n","forward...backward...0.6404469999999947 sec\n","Number of classified segments: [36 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6391439999999875 sec\n","Number of classified segments: [36 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5511050000000068 sec\n","Number of classified segments: [27 0 0 0 ]\n","slice sampling\n","forward...backward...0.6407629999999926 sec\n","Number of classified segments: [28 0 0 0 0 ]\n","lik = 884.2289756254069\n","----- 2 -----\n","slice sampling\n","forward...backward...0.5297230000000184 sec\n","Number of classified segments: [43 0 0 0 ]\n","slice sampling\n","forward...backward...0.4506860000000188 sec\n","Number of classified segments: [43 0 0 ]\n","slice sampling\n","forward...backward...0.45546800000002463 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.5212420000000009 sec\n","Number of classified segments: [30 0 0 0 ]\n","lik = 923.2085612334795\n","----- 3 -----\n","slice sampling\n","forward...backward...1.025490000000019 sec\n","Number of classified segments: [45 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6413830000000189 sec\n","Number of classified segments: [45 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5696760000000154 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.5694119999999998 sec\n","Number of classified segments: [30 0 0 0 ]\n","lik = 933.1441601324259\n","----- 4 -----\n","slice sampling\n","forward...backward...0.34771299999999883 sec\n","Number of classified segments: [45 0 ]\n","slice sampling\n","forward...backward...0.8386689999999817 sec\n","Number of classified segments: [45 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...1.1543839999999932 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7407860000000142 sec\n","Number of classified segments: [30 0 0 0 0 0 ]\n","lik = 923.6360862526356\n","----- 5 -----\n","slice sampling\n","forward...backward...1.1327810000000227 sec\n","Number of classified segments: [45 0 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5437770000000341 sec\n","Number of classified segments: [45 0 0 0 ]\n","slice sampling\n","forward...backward...0.45981199999999944 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.5662599999999998 sec\n","Number of classified segments: [30 0 0 0 ]\n","lik = 921.2805444880634\n","----- 6 -----\n","slice sampling\n","forward...backward...0.7453449999999862 sec\n","Number of classified segments: [45 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.46638599999999997 sec\n","Number of classified segments: [45 0 0 ]\n","slice sampling\n","forward...backward...0.5384899999999675 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.8418369999999982 sec\n","Number of classified segments: [30 0 0 0 0 0 0 ]\n","lik = 929.4423665406273\n","----- 7 -----\n","slice sampling\n","forward...backward...0.9247380000000476 sec\n","Number of classified segments: [45 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8364109999999982 sec\n","Number of classified segments: [45 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7272120000000086 sec\n","Number of classified segments: [30 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.640922000000046 sec\n","Number of classified segments: [30 0 0 0 0 ]\n","lik = 933.6554386768796\n","59.79[sec]\n","*--------------iteration:004--------------*\n","VAE learned iteration: 4 data: 0\n","VAE learned iteration: 4 data: 1\n","VAE learned iteration: 4 data: 2\n","VAE learned iteration: 4 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.9412340000000086 sec\n","Number of classified segments: [27 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7342219999999884 sec\n","Number of classified segments: [27 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6570550000000139 sec\n","Number of classified segments: [27 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.457411000000036 sec\n","Number of classified segments: [24 0 0 ]\n","lik = 1164.626302398563\n","----- 1 -----\n","slice sampling\n","forward...backward...0.8299639999999613 sec\n","Number of classified segments: [23 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.3580249999999978 sec\n","Number of classified segments: [24 0 ]\n","slice sampling\n","forward...backward...0.5343469999999684 sec\n","Number of classified segments: [27 0 0 0 ]\n","slice sampling\n","forward...backward...0.5382599999999798 sec\n","Number of classified segments: [26 0 0 0 ]\n","lik = 1251.0665019714982\n","----- 2 -----\n","slice sampling\n","forward...backward...0.8524820000000091 sec\n","Number of classified segments: [23 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5476889999999912 sec\n","Number of classified segments: [24 0 0 0 ]\n","slice sampling\n","forward...backward...0.8414710000000127 sec\n","Number of classified segments: [32 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6453620000000342 sec\n","Number of classified segments: [32 0 0 0 0 ]\n","lik = 1319.070433774776\n","----- 3 -----\n","slice sampling\n","forward...backward...0.7499839999999836 sec\n","Number of classified segments: [26 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7632349999999519 sec\n","Number of classified segments: [26 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7323089999999866 sec\n","Number of classified segments: [34 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6457320000000095 sec\n","Number of classified segments: [34 0 0 0 0 ]\n","lik = 1351.8548003606886\n","----- 4 -----\n","slice sampling\n","forward...backward...0.823964999999987 sec\n","Number of classified segments: [26 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8482379999999807 sec\n","Number of classified segments: [26 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.520559999999989 sec\n","Number of classified segments: [34 0 0 0 ]\n","slice sampling\n","forward...backward...0.4289039999999886 sec\n","Number of classified segments: [34 0 0 ]\n","lik = 1360.9539654491364\n","----- 5 -----\n","slice sampling\n","forward...backward...0.639883999999995 sec\n","Number of classified segments: [26 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.4530520000000138 sec\n","Number of classified segments: [26 0 0 ]\n","slice sampling\n","forward...backward...0.5499169999999935 sec\n","Number of classified segments: [34 0 0 0 ]\n","slice sampling\n","forward...backward...0.37044700000001285 sec\n","Number of classified segments: [34 0 ]\n","lik = 1361.1183813476246\n","----- 6 -----\n","slice sampling\n","forward...backward...0.6524560000000292 sec\n","Number of classified segments: [26 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7697709999999915 sec\n","Number of classified segments: [26 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6412290000000098 sec\n","Number of classified segments: [34 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5397839999999974 sec\n","Number of classified segments: [34 0 0 0 ]\n","lik = 1360.5178790541977\n","----- 7 -----\n","slice sampling\n","forward...backward...0.5047749999999951 sec\n","Number of classified segments: [26 0 0 0 ]\n","slice sampling\n","forward...backward...0.552174999999977 sec\n","Number of classified segments: [26 0 0 0 ]\n","slice sampling\n","forward...backward...0.7292879999999968 sec\n","Number of classified segments: [34 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.34897699999999077 sec\n","Number of classified segments: [34 0 ]\n","lik = 1372.0221471653083\n","52.47[sec]\n","*--------------iteration:005--------------*\n","VAE learned iteration: 5 data: 0\n","VAE learned iteration: 5 data: 1\n","VAE learned iteration: 5 data: 2\n","VAE learned iteration: 5 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...1.042051000000015 sec\n","Number of classified segments: [24 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8320909999999913 sec\n","Number of classified segments: [27 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6411939999999845 sec\n","Number of classified segments: [27 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7187339999999836 sec\n","Number of classified segments: [26 0 0 0 0 0 ]\n","lik = 1472.1517671356594\n","----- 1 -----\n","slice sampling\n","forward...backward...0.73975200000001 sec\n","Number of classified segments: [24 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7526569999999992 sec\n","Number of classified segments: [25 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8515259999999785 sec\n","Number of classified segments: [26 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.4488550000000373 sec\n","Number of classified segments: [26 0 0 ]\n","lik = 1472.789731722679\n","----- 2 -----\n","slice sampling\n","forward...backward...0.43315999999998667 sec\n","Number of classified segments: [25 0 0 ]\n","slice sampling\n","forward...backward...0.6278429999999844 sec\n","Number of classified segments: [26 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9502150000000142 sec\n","Number of classified segments: [27 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5377579999999966 sec\n","Number of classified segments: [27 0 0 0 ]\n","lik = 1482.2229371791304\n","----- 3 -----\n","slice sampling\n","forward...backward...0.36638499999997975 sec\n","Number of classified segments: [25 0 ]\n","slice sampling\n","forward...backward...0.8292129999999815 sec\n","Number of classified segments: [26 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8308229999999526 sec\n","Number of classified segments: [28 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7432220000000029 sec\n","Number of classified segments: [28 0 0 0 0 0 ]\n","lik = 1492.587068791068\n","----- 4 -----\n","slice sampling\n","forward...backward...0.6469690000000128 sec\n","Number of classified segments: [26 0 0 0 0 ]\n","slice sampling\n","forward...backward...1.1206990000000019 sec\n","Number of classified segments: [27 0 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5623309999999719 sec\n","Number of classified segments: [29 0 0 0 ]\n","slice sampling\n","forward...backward...0.7410429999999906 sec\n","Number of classified segments: [31 0 0 0 0 0 ]\n","lik = 1475.1055758789914\n","----- 5 -----\n","slice sampling\n","forward...backward...0.5326739999999859 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.6506499999999846 sec\n","Number of classified segments: [31 0 0 0 0 ]\n","slice sampling\n","forward...backward...1.360291000000018 sec\n","Number of classified segments: [32 0 0 0 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5474669999999833 sec\n","Number of classified segments: [32 0 0 0 ]\n","lik = 1492.3650785283521\n","----- 6 -----\n","slice sampling\n","forward...backward...0.3605169999999589 sec\n","Number of classified segments: [31 0 ]\n","slice sampling\n","forward...backward...0.36136199999998553 sec\n","Number of classified segments: [31 0 ]\n","slice sampling\n","forward...backward...0.6554209999999898 sec\n","Number of classified segments: [32 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6538320000000226 sec\n","Number of classified segments: [32 0 0 0 0 ]\n","lik = 1489.9890540661906\n","----- 7 -----\n","slice sampling\n","forward...backward...0.43827800000002526 sec\n","Number of classified segments: [31 0 0 ]\n","slice sampling\n","forward...backward...0.9312810000000127 sec\n","Number of classified segments: [31 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6487720000000081 sec\n","Number of classified segments: [32 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.4759770000000003 sec\n","Number of classified segments: [32 0 0 ]\n","lik = 1491.6967200774964\n","61.45[sec]\n","*--------------iteration:006--------------*\n","VAE learned iteration: 6 data: 0\n","VAE learned iteration: 6 data: 1\n","VAE learned iteration: 6 data: 2\n","VAE learned iteration: 6 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.36362700000000814 sec\n","Number of classified segments: [25 0 ]\n","slice sampling\n","forward...backward...1.1553260000000023 sec\n","Number of classified segments: [23 0 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6462530000000015 sec\n","Number of classified segments: [24 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9723070000000007 sec\n","Number of classified segments: [25 0 0 0 0 0 0 0 ]\n","lik = 1538.375732337733\n","----- 1 -----\n","slice sampling\n","forward...backward...0.3581790000000069 sec\n","Number of classified segments: [27 0 ]\n","slice sampling\n","forward...backward...0.3612309999999752 sec\n","Number of classified segments: [27 0 ]\n","slice sampling\n","forward...backward...0.36004800000000614 sec\n","Number of classified segments: [27 0 ]\n","slice sampling\n","forward...backward...0.3580949999999916 sec\n","Number of classified segments: [27 0 ]\n","lik = 1553.4633880815088\n","----- 2 -----\n","slice sampling\n","forward...backward...0.9362239999999815 sec\n","Number of classified segments: [27 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6519610000000284 sec\n","Number of classified segments: [27 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5547679999999673 sec\n","Number of classified segments: [27 0 0 0 ]\n","slice sampling\n","forward...backward...0.5648909999999887 sec\n","Number of classified segments: [27 0 0 0 ]\n","lik = 1555.485231815143\n","----- 3 -----\n","slice sampling\n","forward...backward...0.7629039999999918 sec\n","Number of classified segments: [28 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.439741999999967 sec\n","Number of classified segments: [28 0 0 ]\n","slice sampling\n","forward...backward...0.9217909999999847 sec\n","Number of classified segments: [28 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7329790000000003 sec\n","Number of classified segments: [27 0 0 0 0 0 ]\n","lik = 1558.6732511022155\n","----- 4 -----\n","slice sampling\n","forward...backward...0.5311750000000188 sec\n","Number of classified segments: [27 0 0 0 ]\n","slice sampling\n","forward...backward...0.5625630000000115 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.5499760000000151 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.35434900000001335 sec\n","Number of classified segments: [28 0 ]\n","lik = 1560.274418163278\n","----- 5 -----\n","slice sampling\n","forward...backward...0.4530859999999848 sec\n","Number of classified segments: [27 0 0 ]\n","slice sampling\n","forward...backward...0.4489799999999491 sec\n","Number of classified segments: [27 0 0 ]\n","slice sampling\n","forward...backward...0.812453000000005 sec\n","Number of classified segments: [27 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.37978200000003426 sec\n","Number of classified segments: [27 0 ]\n","lik = 1553.0774018179727\n","----- 6 -----\n","slice sampling\n","forward...backward...0.6292129999999929 sec\n","Number of classified segments: [27 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5441250000000082 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.5359109999999987 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.6339590000000044 sec\n","Number of classified segments: [28 0 0 0 0 ]\n","lik = 1559.6467718998958\n","----- 7 -----\n","slice sampling\n","forward...backward...0.6593029999999658 sec\n","Number of classified segments: [27 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.45250899999996363 sec\n","Number of classified segments: [27 0 0 ]\n","slice sampling\n","forward...backward...0.531853999999953 sec\n","Number of classified segments: [27 0 0 0 ]\n","slice sampling\n","forward...backward...0.7233420000000024 sec\n","Number of classified segments: [27 0 0 0 0 0 ]\n","lik = 1564.52527779911\n","59.01[sec]\n","*--------------iteration:007--------------*\n","VAE learned iteration: 7 data: 0\n","VAE learned iteration: 7 data: 1\n","VAE learned iteration: 7 data: 2\n","VAE learned iteration: 7 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.7266550000000507 sec\n","Number of classified segments: [29 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...1.1794649999999933 sec\n","Number of classified segments: [28 0 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.4378419999999892 sec\n","Number of classified segments: [29 0 0 ]\n","slice sampling\n","forward...backward...1.447384999999997 sec\n","Number of classified segments: [26 0 0 0 0 0 0 0 0 0 0 0 0 ]\n","lik = 1570.387904744224\n","----- 1 -----\n","slice sampling\n","forward...backward...0.3434019999999691 sec\n","Number of classified segments: [28 0 ]\n","slice sampling\n","forward...backward...0.45761199999998325 sec\n","Number of classified segments: [28 0 0 ]\n","slice sampling\n","forward...backward...0.5487150000000156 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.5426799999999616 sec\n","Number of classified segments: [28 0 0 0 ]\n","lik = 1574.8484912116749\n","----- 2 -----\n","slice sampling\n","forward...backward...0.4497270000000526 sec\n","Number of classified segments: [29 0 0 ]\n","slice sampling\n","forward...backward...0.9384109999999737 sec\n","Number of classified segments: [29 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...1.1125869999999622 sec\n","Number of classified segments: [29 0 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.47244000000000597 sec\n","Number of classified segments: [29 0 0 ]\n","lik = 1584.3501268698353\n","----- 3 -----\n","slice sampling\n","forward...backward...0.44891899999993257 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.535492999999974 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.7327769999999418 sec\n","Number of classified segments: [29 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7477499999999964 sec\n","Number of classified segments: [29 0 0 0 0 0 ]\n","lik = 1573.704607960853\n","----- 4 -----\n","slice sampling\n","forward...backward...0.5470139999999901 sec\n","Number of classified segments: [29 0 0 0 ]\n","slice sampling\n","forward...backward...0.9460849999999255 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9314160000000129 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...1.0275990000000093 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 0 ]\n","lik = 1573.6500996619911\n","----- 5 -----\n","slice sampling\n","forward...backward...0.7261129999999412 sec\n","Number of classified segments: [30 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9311500000000024 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5353450000000066 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.5300270000000182 sec\n","Number of classified segments: [30 0 0 0 ]\n","lik = 1576.1984907115764\n","----- 6 -----\n","slice sampling\n","forward...backward...0.8250500000000329 sec\n","Number of classified segments: [30 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.44934200000000146 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.4726670000000013 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.9478619999999864 sec\n","Number of classified segments: [31 0 0 0 0 0 0 0 ]\n","lik = 1574.834121040141\n","----- 7 -----\n","slice sampling\n","forward...backward...0.4328649999999925 sec\n","Number of classified segments: [31 0 0 ]\n","slice sampling\n","forward...backward...1.017464999999902 sec\n","Number of classified segments: [31 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.45000900000002275 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.9524040000000014 sec\n","Number of classified segments: [31 0 0 0 0 0 0 0 ]\n","lik = 1575.372708839034\n","80.02[sec]\n","*--------------iteration:008--------------*\n","VAE learned iteration: 8 data: 0\n","VAE learned iteration: 8 data: 1\n","VAE learned iteration: 8 data: 2\n","VAE learned iteration: 8 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.6673820000000887 sec\n","Number of classified segments: [24 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7223799999999301 sec\n","Number of classified segments: [24 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8395369999999502 sec\n","Number of classified segments: [25 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6500630000000456 sec\n","Number of classified segments: [26 0 0 0 0 ]\n","lik = 1589.64207230925\n","----- 1 -----\n","slice sampling\n","forward...backward...0.6547319999999672 sec\n","Number of classified segments: [27 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7451969999999619 sec\n","Number of classified segments: [27 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7296010000000024 sec\n","Number of classified segments: [28 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5656159999999772 sec\n","Number of classified segments: [29 0 0 0 ]\n","lik = 1592.2505061207291\n","----- 2 -----\n","slice sampling\n","forward...backward...0.6338620000000219 sec\n","Number of classified segments: [29 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6449219999999514 sec\n","Number of classified segments: [29 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.9197269999999662 sec\n","Number of classified segments: [28 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.4464470000000347 sec\n","Number of classified segments: [28 0 0 ]\n","lik = 1586.429945703172\n","----- 3 -----\n","slice sampling\n","forward...backward...0.3571340000000873 sec\n","Number of classified segments: [27 0 ]\n","slice sampling\n","forward...backward...0.35065799999995306 sec\n","Number of classified segments: [28 0 ]\n","slice sampling\n","forward...backward...0.8337530000000015 sec\n","Number of classified segments: [28 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.649043000000006 sec\n","Number of classified segments: [28 0 0 0 0 ]\n","lik = 1591.109947098157\n","----- 4 -----\n","slice sampling\n","forward...backward...0.929520000000025 sec\n","Number of classified segments: [28 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.539284000000066 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.6196949999999788 sec\n","Number of classified segments: [28 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.36791699999992034 sec\n","Number of classified segments: [28 0 ]\n","lik = 1596.4291910224217\n","----- 5 -----\n","slice sampling\n","forward...backward...0.3638739999998961 sec\n","Number of classified segments: [29 0 ]\n","slice sampling\n","forward...backward...0.36436300000002575 sec\n","Number of classified segments: [30 0 ]\n","slice sampling\n","forward...backward...0.43488300000001345 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.9284159999999702 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 ]\n","lik = 1595.6584927944027\n","----- 6 -----\n","slice sampling\n","forward...backward...0.4337600000000066 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.4495430000000624 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.8631780000000617 sec\n","Number of classified segments: [30 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.3517219999999952 sec\n","Number of classified segments: [30 0 ]\n","lik = 1600.416307753605\n","----- 7 -----\n","slice sampling\n","forward...backward...0.44803299999989576 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...0.8459640000000945 sec\n","Number of classified segments: [30 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.7558220000000802 sec\n","Number of classified segments: [30 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6528859999999668 sec\n","Number of classified segments: [30 0 0 0 0 ]\n","lik = 1596.2616412660536\n","57.52[sec]\n","*--------------iteration:009--------------*\n","VAE learned iteration: 9 data: 0\n","VAE learned iteration: 9 data: 1\n","VAE learned iteration: 9 data: 2\n","VAE learned iteration: 9 data: 3\n","----- 0 -----\n","slice sampling\n","forward...backward...0.7348850000000766 sec\n","Number of classified segments: [28 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.734613999999965 sec\n","Number of classified segments: [27 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5522250000000213 sec\n","Number of classified segments: [28 0 0 0 ]\n","slice sampling\n","forward...backward...0.36162100000001374 sec\n","Number of classified segments: [28 0 ]\n","lik = 1600.0744603216178\n","----- 1 -----\n","slice sampling\n","forward...backward...0.6497259999999869 sec\n","Number of classified segments: [28 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6409790000000157 sec\n","Number of classified segments: [28 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.8487709999999424 sec\n","Number of classified segments: [29 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6599129999999604 sec\n","Number of classified segments: [29 0 0 0 0 ]\n","lik = 1599.454014789179\n","----- 2 -----\n","slice sampling\n","forward...backward...0.6546440000000757 sec\n","Number of classified segments: [29 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5479190000000926 sec\n","Number of classified segments: [29 0 0 0 ]\n","slice sampling\n","forward...backward...0.5408419999999978 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.4627749999999651 sec\n","Number of classified segments: [31 0 0 ]\n","lik = 1610.0454183001564\n","----- 3 -----\n","slice sampling\n","forward...backward...0.36884299999996983 sec\n","Number of classified segments: [30 0 ]\n","slice sampling\n","forward...backward...0.6130980000000363 sec\n","Number of classified segments: [30 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.548815999999988 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.7469069999999647 sec\n","Number of classified segments: [30 0 0 0 0 0 ]\n","lik = 1609.098522388492\n","----- 4 -----\n","slice sampling\n","forward...backward...0.5709530000000314 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.8517529999999169 sec\n","Number of classified segments: [30 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6538440000000492 sec\n","Number of classified segments: [30 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.4442339999999376 sec\n","Number of classified segments: [30 0 0 ]\n","lik = 1611.0698178035323\n","----- 5 -----\n","slice sampling\n","forward...backward...1.0377240000000256 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.6519409999999652 sec\n","Number of classified segments: [30 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5261209999999892 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.4481779999999844 sec\n","Number of classified segments: [30 0 0 ]\n","lik = 1607.4921253843913\n","----- 6 -----\n","slice sampling\n","forward...backward...0.42469500000004246 sec\n","Number of classified segments: [30 0 0 ]\n","slice sampling\n","forward...backward...1.019600999999966 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 0 ]\n","slice sampling\n","forward...backward...0.5374530000000277 sec\n","Number of classified segments: [30 0 0 0 ]\n","slice sampling\n","forward...backward...0.9588629999999512 sec\n","Number of classified segments: [30 0 0 0 0 0 0 0 ]\n","lik = 1608.3093264123438\n","----- 7 -----\n","slice sampling\n","forward...backward...0.3291159999999991 sec\n","Number of classified segments: [30 0 ]\n","slice sampling\n","forward...backward...0.47750200000007226 sec\n","Number of classified segments: [31 0 0 ]\n","slice sampling\n","forward...backward...0.5429849999999306 sec\n","Number of classified segments: [31 0 0 0 ]\n","slice sampling\n","forward...backward...0.5643579999999702 sec\n","Number of classified segments: [32 0 0 0 ]\n","lik = 1611.6036334268545\n","61.33[sec]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"MFb5S7jVRYLS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}